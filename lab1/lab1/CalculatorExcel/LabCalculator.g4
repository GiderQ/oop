grammar LabCalculator;/**	PARSER RULES */compileUnit : expression EOF ;expression:	logicExpression	;logicExpression:	logicExpression OP_OR logicExpression          #OrExpr	| logicExpression OP_AND logicExpression       #AndExpr	| OP_NOT logicExpression                       #NotExpr	| comparison                                   #CompareExpr	;comparison    : left=operand op=(OP_EQUAL | OP_LESS | OP_GREATER) right=operand    ;operand: 	LPAREN expression RPAREN                      #ParenthesizedOperand	| (OP_ADD | OP_SUB)? atom                     #UnaryOperand	| operand (OP_MOD | OP_DIV) operand           #ModDivOperand	;atom:	NUMBER                                        #NumberOperand	| IDENTIFIER                                  #IdentifierOperand	;/**	LEXER RULES */// Variant 60// 2OP_MOD : 'mod' ;OP_DIV : 'div' ;// 3OP_ADD : '+' ;OP_SUB : '-' ;// 8OP_EQUAL   : '=' ;OP_LESS    : '<' ;OP_GREATER : '>' ;// 10OP_NOT : 'not' ;// 11OP_OR  : 'or' ;OP_AND : 'and' ;IDENTIFIER : [a-zA-Z_] [a-zA-Z_0-9]* ;NUMBER : [0-9]+ ('.' [0-9]+)? ;LPAREN : '(' ;RPAREN : ')' ;WS : [ \t\r\n]+ -> skip ;