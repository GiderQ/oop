//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\repository Github\oop\lab1\lab1\CalculatorExcel\LabCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LabCalculatorLexer : Lexer {
	public const int
		OP_MOD=1, OP_DIV=2, OP_ADD=3, OP_SUB=4, OP_EQUAL=5, OP_LESS=6, OP_GREATER=7, 
		OP_NOT=8, OP_OR=9, OP_AND=10, BOOL=11, IDENTIFIER=12, NUMBER=13, LPAREN=14, 
		RPAREN=15, WS=16;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"OP_MOD", "OP_DIV", "OP_ADD", "OP_SUB", "OP_EQUAL", "OP_LESS", "OP_GREATER", 
		"OP_NOT", "OP_OR", "OP_AND", "BOOL", "IDENTIFIER", "NUMBER", "LPAREN", 
		"RPAREN", "WS"
	};


	public LabCalculatorLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'mod'", "'div'", "'+'", "'-'", "'='", "'<'", "'>'", "'not'", "'or'", 
		"'and'", null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OP_MOD", "OP_DIV", "OP_ADD", "OP_SUB", "OP_EQUAL", "OP_LESS", "OP_GREATER", 
		"OP_NOT", "OP_OR", "OP_AND", "BOOL", "IDENTIFIER", "NUMBER", "LPAREN", 
		"RPAREN", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x12j\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\t\x3\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x5\fJ\n\f\x3\r\x3\r\a\rN\n\r\f\r\xE\rQ\v\r\x3\xE\x6\xET\n"+
		"\xE\r\xE\xE\xEU\x3\xE\x3\xE\x6\xEZ\n\xE\r\xE\xE\xE[\x5\xE^\n\xE\x3\xF"+
		"\x3\xF\x3\x10\x3\x10\x3\x11\x6\x11\x65\n\x11\r\x11\xE\x11\x66\x3\x11\x3"+
		"\x11\x2\x2\x2\x12\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2"+
		"\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10"+
		"\x1F\x2\x11!\x2\x12\x3\x2\x6\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\"+
		"\x61\x61\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"o\x2\x3\x3\x2\x2\x2\x2\x5"+
		"\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3"+
		"\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15"+
		"\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2"+
		"\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x3#\x3\x2\x2\x2"+
		"\x5\'\x3\x2\x2\x2\a+\x3\x2\x2\x2\t-\x3\x2\x2\x2\v/\x3\x2\x2\x2\r\x31\x3"+
		"\x2\x2\x2\xF\x33\x3\x2\x2\x2\x11\x35\x3\x2\x2\x2\x13\x39\x3\x2\x2\x2\x15"+
		"<\x3\x2\x2\x2\x17I\x3\x2\x2\x2\x19K\x3\x2\x2\x2\x1BS\x3\x2\x2\x2\x1D_"+
		"\x3\x2\x2\x2\x1F\x61\x3\x2\x2\x2!\x64\x3\x2\x2\x2#$\ao\x2\x2$%\aq\x2\x2"+
		"%&\a\x66\x2\x2&\x4\x3\x2\x2\x2\'(\a\x66\x2\x2()\ak\x2\x2)*\ax\x2\x2*\x6"+
		"\x3\x2\x2\x2+,\a-\x2\x2,\b\x3\x2\x2\x2-.\a/\x2\x2.\n\x3\x2\x2\x2/\x30"+
		"\a?\x2\x2\x30\f\x3\x2\x2\x2\x31\x32\a>\x2\x2\x32\xE\x3\x2\x2\x2\x33\x34"+
		"\a@\x2\x2\x34\x10\x3\x2\x2\x2\x35\x36\ap\x2\x2\x36\x37\aq\x2\x2\x37\x38"+
		"\av\x2\x2\x38\x12\x3\x2\x2\x2\x39:\aq\x2\x2:;\at\x2\x2;\x14\x3\x2\x2\x2"+
		"<=\a\x63\x2\x2=>\ap\x2\x2>?\a\x66\x2\x2?\x16\x3\x2\x2\x2@\x41\av\x2\x2"+
		"\x41\x42\at\x2\x2\x42\x43\aw\x2\x2\x43J\ag\x2\x2\x44\x45\ah\x2\x2\x45"+
		"\x46\a\x63\x2\x2\x46G\an\x2\x2GH\au\x2\x2HJ\ag\x2\x2I@\x3\x2\x2\x2I\x44"+
		"\x3\x2\x2\x2J\x18\x3\x2\x2\x2KO\t\x2\x2\x2LN\t\x3\x2\x2ML\x3\x2\x2\x2"+
		"NQ\x3\x2\x2\x2OM\x3\x2\x2\x2OP\x3\x2\x2\x2P\x1A\x3\x2\x2\x2QO\x3\x2\x2"+
		"\x2RT\t\x4\x2\x2SR\x3\x2\x2\x2TU\x3\x2\x2\x2US\x3\x2\x2\x2UV\x3\x2\x2"+
		"\x2V]\x3\x2\x2\x2WY\a\x30\x2\x2XZ\t\x4\x2\x2YX\x3\x2\x2\x2Z[\x3\x2\x2"+
		"\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\^\x3\x2\x2\x2]W\x3\x2\x2\x2]^\x3\x2"+
		"\x2\x2^\x1C\x3\x2\x2\x2_`\a*\x2\x2`\x1E\x3\x2\x2\x2\x61\x62\a+\x2\x2\x62"+
		" \x3\x2\x2\x2\x63\x65\t\x5\x2\x2\x64\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2"+
		"\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hi\b\x11\x2\x2i"+
		"\"\x3\x2\x2\x2\t\x2IOU[]\x66\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabCalculator
