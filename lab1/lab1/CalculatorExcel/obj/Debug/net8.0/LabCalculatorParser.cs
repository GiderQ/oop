//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\repository Github\oop\lab1\lab1\CalculatorExcel\LabCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LabCalculatorParser : Parser {
	public const int
		OP_MOD=1, OP_DIV=2, OP_ADD=3, OP_SUB=4, OP_EQUAL=5, OP_LESS=6, OP_GREATER=7, 
		OP_NOT=8, OP_OR=9, OP_AND=10, BOOL=11, IDENTIFIER=12, NUMBER=13, LPAREN=14, 
		RPAREN=15, WS=16, OP_MUL=17;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1, RULE_logicExpression = 2, RULE_comparison = 3, 
		RULE_operand = 4, RULE_atom = 5;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression", "logicExpression", "comparison", "operand", 
		"atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'mod'", "'div'", "'+'", "'-'", "'='", "'<'", "'>'", "'not'", "'or'", 
		"'and'", null, null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OP_MOD", "OP_DIV", "OP_ADD", "OP_SUB", "OP_EQUAL", "OP_LESS", "OP_GREATER", 
		"OP_NOT", "OP_OR", "OP_AND", "BOOL", "IDENTIFIER", "NUMBER", "LPAREN", 
		"RPAREN", "WS", "OP_MUL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LabCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LabCalculatorParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; logicExpression(0);
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SubOperandContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_SUB() { return GetToken(LabCalculatorParser.OP_SUB, 0); }
		public SubOperandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterSubOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitSubOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivOperandContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_DIV() { return GetToken(LabCalculatorParser.OP_DIV, 0); }
		public DivOperandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterDivOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitDivOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryPlusContext : ExpressionContext {
		public ITerminalNode OP_ADD() { return GetToken(LabCalculatorParser.OP_ADD, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryPlusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulOperandContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_MUL() { return GetToken(LabCalculatorParser.OP_MUL, 0); }
		public MulOperandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterMulOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitMulOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusContext : ExpressionContext {
		public ITerminalNode OP_SUB() { return GetToken(LabCalculatorParser.OP_SUB, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnaryMinusContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExprContext : ExpressionContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddOperandContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_ADD() { return GetToken(LabCalculatorParser.OP_ADD, 0); }
		public AddOperandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAddOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAddOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModOperandContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_MOD() { return GetToken(LabCalculatorParser.OP_MOD, 0); }
		public ModOperandContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterModOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitModOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OP_ADD:
				{
				_localctx = new UnaryPlusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 16; Match(OP_ADD);
				State = 17; expression(3);
				}
				break;
			case OP_SUB:
				{
				_localctx = new UnaryMinusContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 18; Match(OP_SUB);
				State = 19; expression(2);
				}
				break;
			case BOOL:
			case IDENTIFIER:
			case NUMBER:
			case LPAREN:
				{
				_localctx = new AtomExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 20; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 40;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 38;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new ModOperandContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 23;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 24; Match(OP_MOD);
						State = 25; expression(9);
						}
						break;

					case 2:
						{
						_localctx = new DivOperandContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 26;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 27; Match(OP_DIV);
						State = 28; expression(8);
						}
						break;

					case 3:
						{
						_localctx = new MulOperandContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 29;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 30; Match(OP_MUL);
						State = 31; expression(7);
						}
						break;

					case 4:
						{
						_localctx = new AddOperandContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 32;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 33; Match(OP_ADD);
						State = 34; expression(6);
						}
						break;

					case 5:
						{
						_localctx = new SubOperandContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 35;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 36; Match(OP_SUB);
						State = 37; expression(5);
						}
						break;
					}
					} 
				}
				State = 42;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicExpressionContext : ParserRuleContext {
		public LogicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpression; } }
	 
		public LogicExpressionContext() { }
		public virtual void CopyFrom(LogicExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : LogicExpressionContext {
		public LogicExpressionContext left;
		public IToken op;
		public LogicExpressionContext right;
		public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		public ITerminalNode OP_AND() { return GetToken(LabCalculatorParser.OP_AND, 0); }
		public AndExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExprContext : LogicExpressionContext {
		public ITerminalNode BOOL() { return GetToken(LabCalculatorParser.BOOL, 0); }
		public BoolExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterBoolExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitBoolExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : LogicExpressionContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public CompareExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedExprContext : LogicExpressionContext {
		public ITerminalNode LPAREN() { return GetToken(LabCalculatorParser.LPAREN, 0); }
		public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LabCalculatorParser.RPAREN, 0); }
		public ParenthesizedExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : LogicExpressionContext {
		public IToken op;
		public LogicExpressionContext expr;
		public ITerminalNode OP_NOT() { return GetToken(LabCalculatorParser.OP_NOT, 0); }
		public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public NotExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : LogicExpressionContext {
		public LogicExpressionContext left;
		public IToken op;
		public LogicExpressionContext right;
		public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		public ITerminalNode OP_OR() { return GetToken(LabCalculatorParser.OP_OR, 0); }
		public OrExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExpressionContext logicExpression() {
		return logicExpression(0);
	}

	private LogicExpressionContext logicExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LogicExpressionContext _localctx = new LogicExpressionContext(_ctx, _parentState);
		LogicExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logicExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 44; ((NotExprContext)_localctx).op = Match(OP_NOT);
				State = 45; ((NotExprContext)_localctx).expr = logicExpression(4);
				}
				break;

			case 2:
				{
				_localctx = new CompareExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 46; comparison();
				}
				break;

			case 3:
				{
				_localctx = new BoolExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 47; Match(BOOL);
				}
				break;

			case 4:
				{
				_localctx = new ParenthesizedExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 48; Match(LPAREN);
				State = 49; logicExpression(0);
				State = 50; Match(RPAREN);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 62;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 60;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
					case 1:
						{
						_localctx = new OrExprContext(new LogicExpressionContext(_parentctx, _parentState));
						((OrExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 54;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 55; ((OrExprContext)_localctx).op = Match(OP_OR);
						State = 56; ((OrExprContext)_localctx).right = logicExpression(7);
						}
						break;

					case 2:
						{
						_localctx = new AndExprContext(new LogicExpressionContext(_parentctx, _parentState));
						((AndExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 57;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 58; ((AndExprContext)_localctx).op = Match(OP_AND);
						State = 59; ((AndExprContext)_localctx).right = logicExpression(6);
						}
						break;
					}
					} 
				}
				State = 64;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public ExpressionContext left;
		public IToken op;
		public ExpressionContext right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_EQUAL() { return GetToken(LabCalculatorParser.OP_EQUAL, 0); }
		public ITerminalNode OP_LESS() { return GetToken(LabCalculatorParser.OP_LESS, 0); }
		public ITerminalNode OP_GREATER() { return GetToken(LabCalculatorParser.OP_GREATER, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; _localctx.left = expression(0);
			State = 66;
			_localctx.op = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_EQUAL) | (1L << OP_LESS) | (1L << OP_GREATER))) != 0)) ) {
				_localctx.op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 67; _localctx.right = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
	 
		public OperandContext() { }
		public virtual void CopyFrom(OperandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOperandContext : OperandContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode OP_ADD() { return GetToken(LabCalculatorParser.OP_ADD, 0); }
		public ITerminalNode OP_SUB() { return GetToken(LabCalculatorParser.OP_SUB, 0); }
		public UnaryOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModDivOperandContext : OperandContext {
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode OP_MOD() { return GetToken(LabCalculatorParser.OP_MOD, 0); }
		public ITerminalNode OP_DIV() { return GetToken(LabCalculatorParser.OP_DIV, 0); }
		public ModDivOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterModDivOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitModDivOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModDivOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedOperandContext : OperandContext {
		public ITerminalNode LPAREN() { return GetToken(LabCalculatorParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LabCalculatorParser.RPAREN, 0); }
		public ParenthesizedOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		return operand(0);
	}

	private OperandContext operand(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		OperandContext _localctx = new OperandContext(_ctx, _parentState);
		OperandContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_operand, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				_localctx = new ParenthesizedOperandContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 70; Match(LPAREN);
				State = 71; expression(0);
				State = 72; Match(RPAREN);
				}
				break;

			case 2:
				{
				_localctx = new UnaryOperandContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 75;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OP_ADD || _la==OP_SUB) {
					{
					State = 74;
					_la = _input.La(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 77; atom();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 85;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ModDivOperandContext(new OperandContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_operand);
					State = 80;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 81;
					_la = _input.La(1);
					if ( !(_la==OP_MOD || _la==OP_DIV) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 82; operand(2);
					}
					} 
				}
				State = 87;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AtomBoolContext : AtomContext {
		public ITerminalNode BOOL() { return GetToken(LabCalculatorParser.BOOL, 0); }
		public AtomBoolContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAtomBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAtomBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomNumberContext : AtomContext {
		public ITerminalNode NUMBER() { return GetToken(LabCalculatorParser.NUMBER, 0); }
		public AtomNumberContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAtomNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAtomNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomNumber(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomIdentifierContext : AtomContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LabCalculatorParser.IDENTIFIER, 0); }
		public AtomIdentifierContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAtomIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAtomIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomParenthesizedContext : AtomContext {
		public ITerminalNode LPAREN() { return GetToken(LabCalculatorParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LabCalculatorParser.RPAREN, 0); }
		public AtomParenthesizedContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAtomParenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAtomParenthesized(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomParenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 95;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new AtomNumberContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(NUMBER);
				}
				break;
			case IDENTIFIER:
				_localctx = new AtomIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; Match(IDENTIFIER);
				}
				break;
			case BOOL:
				_localctx = new AtomBoolContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; Match(BOOL);
				}
				break;
			case LPAREN:
				_localctx = new AtomParenthesizedContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; Match(LPAREN);
				State = 92; expression(0);
				State = 93; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 2: return logicExpression_sempred((LogicExpressionContext)_localctx, predIndex);

		case 4: return operand_sempred((OperandContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 8);

		case 1: return Precpred(_ctx, 7);

		case 2: return Precpred(_ctx, 6);

		case 3: return Precpred(_ctx, 5);

		case 4: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool logicExpression_sempred(LogicExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(_ctx, 6);

		case 6: return Precpred(_ctx, 5);
		}
		return true;
	}
	private bool operand_sempred(OperandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x13\x64\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x18\n\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\a\x3)\n\x3\f\x3\xE\x3,\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\x37\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\a\x4?\n\x4\f\x4\xE\x4\x42\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6N\n\x6\x3\x6\x5\x6Q\n\x6\x3\x6\x3\x6\x3\x6"+
		"\a\x6V\n\x6\f\x6\xE\x6Y\v\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x62"+
		"\n\a\x3\a\x2\x2\x5\x4\x6\n\b\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\x2\x5\x3"+
		"\x2\a\t\x3\x2\x5\x6\x3\x2\x3\x4o\x2\xE\x3\x2\x2\x2\x4\x17\x3\x2\x2\x2"+
		"\x6\x36\x3\x2\x2\x2\b\x43\x3\x2\x2\x2\nP\x3\x2\x2\x2\f\x61\x3\x2\x2\x2"+
		"\xE\xF\x5\x6\x4\x2\xF\x10\a\x2\x2\x3\x10\x3\x3\x2\x2\x2\x11\x12\b\x3\x1"+
		"\x2\x12\x13\a\x5\x2\x2\x13\x18\x5\x4\x3\x5\x14\x15\a\x6\x2\x2\x15\x18"+
		"\x5\x4\x3\x4\x16\x18\x5\f\a\x2\x17\x11\x3\x2\x2\x2\x17\x14\x3\x2\x2\x2"+
		"\x17\x16\x3\x2\x2\x2\x18*\x3\x2\x2\x2\x19\x1A\f\n\x2\x2\x1A\x1B\a\x3\x2"+
		"\x2\x1B)\x5\x4\x3\v\x1C\x1D\f\t\x2\x2\x1D\x1E\a\x4\x2\x2\x1E)\x5\x4\x3"+
		"\n\x1F \f\b\x2\x2 !\a\x13\x2\x2!)\x5\x4\x3\t\"#\f\a\x2\x2#$\a\x5\x2\x2"+
		"$)\x5\x4\x3\b%&\f\x6\x2\x2&\'\a\x6\x2\x2\')\x5\x4\x3\a(\x19\x3\x2\x2\x2"+
		"(\x1C\x3\x2\x2\x2(\x1F\x3\x2\x2\x2(\"\x3\x2\x2\x2(%\x3\x2\x2\x2),\x3\x2"+
		"\x2\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+\x5\x3\x2\x2\x2,*\x3\x2\x2\x2-.\b\x4"+
		"\x1\x2./\a\n\x2\x2/\x37\x5\x6\x4\x6\x30\x37\x5\b\x5\x2\x31\x37\a\r\x2"+
		"\x2\x32\x33\a\x10\x2\x2\x33\x34\x5\x6\x4\x2\x34\x35\a\x11\x2\x2\x35\x37"+
		"\x3\x2\x2\x2\x36-\x3\x2\x2\x2\x36\x30\x3\x2\x2\x2\x36\x31\x3\x2\x2\x2"+
		"\x36\x32\x3\x2\x2\x2\x37@\x3\x2\x2\x2\x38\x39\f\b\x2\x2\x39:\a\v\x2\x2"+
		":?\x5\x6\x4\t;<\f\a\x2\x2<=\a\f\x2\x2=?\x5\x6\x4\b>\x38\x3\x2\x2\x2>;"+
		"\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\a\x3"+
		"\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x44\x5\x4\x3\x2\x44\x45\t\x2\x2\x2\x45"+
		"\x46\x5\x4\x3\x2\x46\t\x3\x2\x2\x2GH\b\x6\x1\x2HI\a\x10\x2\x2IJ\x5\x4"+
		"\x3\x2JK\a\x11\x2\x2KQ\x3\x2\x2\x2LN\t\x3\x2\x2ML\x3\x2\x2\x2MN\x3\x2"+
		"\x2\x2NO\x3\x2\x2\x2OQ\x5\f\a\x2PG\x3\x2\x2\x2PM\x3\x2\x2\x2QW\x3\x2\x2"+
		"\x2RS\f\x3\x2\x2ST\t\x4\x2\x2TV\x5\n\x6\x4UR\x3\x2\x2\x2VY\x3\x2\x2\x2"+
		"WU\x3\x2\x2\x2WX\x3\x2\x2\x2X\v\x3\x2\x2\x2YW\x3\x2\x2\x2Z\x62\a\xF\x2"+
		"\x2[\x62\a\xE\x2\x2\\\x62\a\r\x2\x2]^\a\x10\x2\x2^_\x5\x4\x3\x2_`\a\x11"+
		"\x2\x2`\x62\x3\x2\x2\x2\x61Z\x3\x2\x2\x2\x61[\x3\x2\x2\x2\x61\\\x3\x2"+
		"\x2\x2\x61]\x3\x2\x2\x2\x62\r\x3\x2\x2\x2\f\x17(*\x36>@MPW\x61";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabCalculator
