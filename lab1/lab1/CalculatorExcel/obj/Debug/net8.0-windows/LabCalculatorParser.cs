//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\repository Github\oop_lab1\Calculator\LabCalculator.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LabCalculator {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class LabCalculatorParser : Parser {
	public const int
		OP_MOD=1, OP_DIV=2, OP_ADD=3, OP_SUB=4, OP_EQUAL=5, OP_LESS=6, OP_GREATER=7, 
		OP_NOT=8, OP_OR=9, OP_AND=10, IDENTIFIER=11, NUMBER=12, LPAREN=13, RPAREN=14, 
		WS=15;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1, RULE_logicExpression = 2, RULE_comparison = 3, 
		RULE_operand = 4, RULE_atom = 5;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression", "logicExpression", "comparison", "operand", 
		"atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'mod'", "'div'", "'+'", "'-'", "'='", "'<'", "'>'", "'not'", "'or'", 
		"'and'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OP_MOD", "OP_DIV", "OP_ADD", "OP_SUB", "OP_EQUAL", "OP_LESS", "OP_GREATER", 
		"OP_NOT", "OP_OR", "OP_AND", "IDENTIFIER", "NUMBER", "LPAREN", "RPAREN", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "LabCalculator.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public LabCalculatorParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompileUnitContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(LabCalculatorParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterCompileUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitCompileUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; expression();
			State = 13; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15; logicExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicExpressionContext : ParserRuleContext {
		public LogicExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicExpression; } }
	 
		public LogicExpressionContext() { }
		public virtual void CopyFrom(LogicExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AndExprContext : LogicExpressionContext {
		public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		public ITerminalNode OP_AND() { return GetToken(LabCalculatorParser.OP_AND, 0); }
		public AndExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareExprContext : LogicExpressionContext {
		public ComparisonContext comparison() {
			return GetRuleContext<ComparisonContext>(0);
		}
		public CompareExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterCompareExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitCompareExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : LogicExpressionContext {
		public ITerminalNode OP_NOT() { return GetToken(LabCalculatorParser.OP_NOT, 0); }
		public LogicExpressionContext logicExpression() {
			return GetRuleContext<LogicExpressionContext>(0);
		}
		public NotExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : LogicExpressionContext {
		public LogicExpressionContext[] logicExpression() {
			return GetRuleContexts<LogicExpressionContext>();
		}
		public LogicExpressionContext logicExpression(int i) {
			return GetRuleContext<LogicExpressionContext>(i);
		}
		public ITerminalNode OP_OR() { return GetToken(LabCalculatorParser.OP_OR, 0); }
		public OrExprContext(LogicExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicExpressionContext logicExpression() {
		return logicExpression(0);
	}

	private LogicExpressionContext logicExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		LogicExpressionContext _localctx = new LogicExpressionContext(_ctx, _parentState);
		LogicExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_logicExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OP_NOT:
				{
				_localctx = new NotExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 18; Match(OP_NOT);
				State = 19; logicExpression(2);
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case IDENTIFIER:
			case NUMBER:
			case LPAREN:
				{
				_localctx = new CompareExprContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 20; comparison();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 31;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 29;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
					case 1:
						{
						_localctx = new OrExprContext(new LogicExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 23;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 24; Match(OP_OR);
						State = 25; logicExpression(5);
						}
						break;

					case 2:
						{
						_localctx = new AndExprContext(new LogicExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logicExpression);
						State = 26;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 27; Match(OP_AND);
						State = 28; logicExpression(4);
						}
						break;
					}
					} 
				}
				State = 33;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ComparisonContext : ParserRuleContext {
		public OperandContext left;
		public IToken op;
		public OperandContext right;
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode OP_EQUAL() { return GetToken(LabCalculatorParser.OP_EQUAL, 0); }
		public ITerminalNode OP_LESS() { return GetToken(LabCalculatorParser.OP_LESS, 0); }
		public ITerminalNode OP_GREATER() { return GetToken(LabCalculatorParser.OP_GREATER, 0); }
		public ComparisonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison; } }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonContext comparison() {
		ComparisonContext _localctx = new ComparisonContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_comparison);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; _localctx.left = operand(0);
			State = 35;
			_localctx.op = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OP_EQUAL) | (1L << OP_LESS) | (1L << OP_GREATER))) != 0)) ) {
				_localctx.op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 36; _localctx.right = operand(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandContext : ParserRuleContext {
		public OperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operand; } }
	 
		public OperandContext() { }
		public virtual void CopyFrom(OperandContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryOperandContext : OperandContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public ITerminalNode OP_ADD() { return GetToken(LabCalculatorParser.OP_ADD, 0); }
		public ITerminalNode OP_SUB() { return GetToken(LabCalculatorParser.OP_SUB, 0); }
		public UnaryOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterUnaryOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitUnaryOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModDivOperandContext : OperandContext {
		public OperandContext[] operand() {
			return GetRuleContexts<OperandContext>();
		}
		public OperandContext operand(int i) {
			return GetRuleContext<OperandContext>(i);
		}
		public ITerminalNode OP_MOD() { return GetToken(LabCalculatorParser.OP_MOD, 0); }
		public ITerminalNode OP_DIV() { return GetToken(LabCalculatorParser.OP_DIV, 0); }
		public ModDivOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterModDivOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitModDivOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModDivOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedOperandContext : OperandContext {
		public ITerminalNode LPAREN() { return GetToken(LabCalculatorParser.LPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(LabCalculatorParser.RPAREN, 0); }
		public ParenthesizedOperandContext(OperandContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesizedOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesizedOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OperandContext operand() {
		return operand(0);
	}

	private OperandContext operand(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		OperandContext _localctx = new OperandContext(_ctx, _parentState);
		OperandContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_operand, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LPAREN:
				{
				_localctx = new ParenthesizedOperandContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 39; Match(LPAREN);
				State = 40; expression();
				State = 41; Match(RPAREN);
				}
				break;
			case OP_ADD:
			case OP_SUB:
			case IDENTIFIER:
			case NUMBER:
				{
				_localctx = new UnaryOperandContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OP_ADD || _la==OP_SUB) {
					{
					State = 43;
					_la = _input.La(1);
					if ( !(_la==OP_ADD || _la==OP_SUB) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 46; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 54;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ModDivOperandContext(new OperandContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_operand);
					State = 49;
					if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
					State = 50;
					_la = _input.La(1);
					if ( !(_la==OP_MOD || _la==OP_DIV) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 51; operand(2);
					}
					} 
				}
				State = 56;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOperandContext : AtomContext {
		public ITerminalNode IDENTIFIER() { return GetToken(LabCalculatorParser.IDENTIFIER, 0); }
		public IdentifierOperandContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterIdentifierOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitIdentifierOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOperand(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberOperandContext : AtomContext {
		public ITerminalNode NUMBER() { return GetToken(LabCalculatorParser.NUMBER, 0); }
		public NumberOperandContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.EnterNumberOperand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ILabCalculatorListener typedListener = listener as ILabCalculatorListener;
			if (typedListener != null) typedListener.ExitNumberOperand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILabCalculatorVisitor<TResult> typedVisitor = visitor as ILabCalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_atom);
		try {
			State = 59;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				_localctx = new NumberOperandContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(NUMBER);
				}
				break;
			case IDENTIFIER:
				_localctx = new IdentifierOperandContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return logicExpression_sempred((LogicExpressionContext)_localctx, predIndex);

		case 4: return operand_sempred((OperandContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logicExpression_sempred(LogicExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool operand_sempred(OperandContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x11@\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x18\n\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\a\x4 \n\x4\f\x4\xE\x4#\v\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6/\n\x6\x3\x6\x5\x6\x32\n\x6"+
		"\x3\x6\x3\x6\x3\x6\a\x6\x37\n\x6\f\x6\xE\x6:\v\x6\x3\a\x3\a\x5\a>\n\a"+
		"\x3\a\x2\x2\x4\x6\n\b\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\x2\x5\x3\x2\a\t"+
		"\x3\x2\x5\x6\x3\x2\x3\x4@\x2\xE\x3\x2\x2\x2\x4\x11\x3\x2\x2\x2\x6\x17"+
		"\x3\x2\x2\x2\b$\x3\x2\x2\x2\n\x31\x3\x2\x2\x2\f=\x3\x2\x2\x2\xE\xF\x5"+
		"\x4\x3\x2\xF\x10\a\x2\x2\x3\x10\x3\x3\x2\x2\x2\x11\x12\x5\x6\x4\x2\x12"+
		"\x5\x3\x2\x2\x2\x13\x14\b\x4\x1\x2\x14\x15\a\n\x2\x2\x15\x18\x5\x6\x4"+
		"\x4\x16\x18\x5\b\x5\x2\x17\x13\x3\x2\x2\x2\x17\x16\x3\x2\x2\x2\x18!\x3"+
		"\x2\x2\x2\x19\x1A\f\x6\x2\x2\x1A\x1B\a\v\x2\x2\x1B \x5\x6\x4\a\x1C\x1D"+
		"\f\x5\x2\x2\x1D\x1E\a\f\x2\x2\x1E \x5\x6\x4\x6\x1F\x19\x3\x2\x2\x2\x1F"+
		"\x1C\x3\x2\x2\x2 #\x3\x2\x2\x2!\x1F\x3\x2\x2\x2!\"\x3\x2\x2\x2\"\a\x3"+
		"\x2\x2\x2#!\x3\x2\x2\x2$%\x5\n\x6\x2%&\t\x2\x2\x2&\'\x5\n\x6\x2\'\t\x3"+
		"\x2\x2\x2()\b\x6\x1\x2)*\a\xF\x2\x2*+\x5\x4\x3\x2+,\a\x10\x2\x2,\x32\x3"+
		"\x2\x2\x2-/\t\x3\x2\x2.-\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		"\x32\x5\f\a\x2\x31(\x3\x2\x2\x2\x31.\x3\x2\x2\x2\x32\x38\x3\x2\x2\x2\x33"+
		"\x34\f\x3\x2\x2\x34\x35\t\x4\x2\x2\x35\x37\x5\n\x6\x4\x36\x33\x3\x2\x2"+
		"\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39\v\x3"+
		"\x2\x2\x2:\x38\x3\x2\x2\x2;>\a\xE\x2\x2<>\a\r\x2\x2=;\x3\x2\x2\x2=<\x3"+
		"\x2\x2\x2>\r\x3\x2\x2\x2\t\x17\x1F!.\x31\x38=";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LabCalculator
